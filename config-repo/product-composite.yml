springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: se.magnus.microservices.composite.product
  pathsToMatch: /**
  cache:
    disabled: true

  swagger-ui:
    oauth2-redirect-url: https://localhost:8443/webjars/swagger-ui/oauth2-redirect.html
    oauth:
      client-id: writer
      client-secret: '{cipher}5a176021e775c34b06a5be132cda95129f1f0beb4ddf4dd1d86d4e7ad1c70f80'
      use-basic-authentication-with-access-code-grant: true
  oAuthFlow:
    authorizationUrl: https://localhost:8443/oauth2/authorize
    tokenUrl: https://localhost:8443/oauth2/token



api:

  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfService: MY TERMS OF SERVICE
    license: MY LICENSE
    licenseUrl: MY LICENSE URL

    externalDocDesc: MY WIKI PAGE
    externalDocUrl: MY WIKI URL
    contact:
      name: NAME OF CONTACT
      url: URL TO CONTACT
      email: contact@mail.com

  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the specified id does not exist
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information

  product-composite:

    get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Product information
        1. Reviews
        1. Recommendations
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        1. If no product information is found, a **404 - Not Found** error will be returned
        1. In no recommendations or reviews are found for a product, a partial response will be returned

    create-composite-product:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be split up and stored as separate product-info, recommendation and review entities.

        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           an **422 - Unprocessable Entity** error with a "duplicate key" error message will be returned

    delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specified productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.

        This means that a delete request of a non-existing product will return **200 Ok**.

server.port: 7000
server.error.include-message: always

spring.application.name: product-composite

spring.cloud:
  stream:
    default:
      contentType: application/json
    bindings:
      products-out-0:
        destination: products
        producer:
          required-groups: auditGroup
      recommendations-out-0:
        destination: recommendations
        producer:
          required-groups: auditGroup
      reviews-out-0:
        destination: reviews
        producer:
          required-groups: auditGroup
    kafka:
      binder:
        enable-observation: true

logging:
  level:
    root: INFO
    se.magnus: DEBUG

server:
  forward-headers-strategy: framework

resilience4j:
  timelimiter:
    instances:
      product:
        # 인스턴스가 시간 초과 예외를 던지지 않고 호출이 완료될 떄까지 기다리는 시간
        timeout-duration: 2s
  circuitbreaker:
    instances:
      product:
        # Resilience4j가 상태 점검 엔드포인트의 상태에 영향을 미치지 않게 한다.
        # 컴포넌트가 의존하는 컴포넌트 중 하나가 비정상이더라도 해당 컴포넌트를 정상으로 간주한다.
        allow-health-indicator-to-fail: false
        # Resilience4j가 서킷 브레이커의 상태에 관한 정보로 상태 점검 엔드포인트를 채우게 한다.
        register-health-indicator: true
        # 슬라이딩 윈도우를 사용해 가장 최근 이벤트를 계산해 서킷 브레이커를 열어야 할지 결정한다.
        sliding-window-type: COUNT_BASED
        # 닫힌 상태에서의 호출 수, 서킷을 열어야 할지 결정할 때 사용한다.
        sliding-window-size: 5
        # 실패한 호출에 대한 임곗값(백분율)으로 이값을 초과하면 서킷이 열린다.
        failure-rate-threshold: 50
        # 반열림 상태로 전환하기 전에 서킷을 열린 상태로 유지하는 시간
        wait-duration-in-open-state: 10000
        # 반열림 상태에서의 호출 수, 서킷을 다시 열거나 닫힘 상태로 돌아갈지 결정할 때 사용
        permitted-number-of-calls-in-half-open-state: 3
        # 대기 시간이 끝나면 자동으로 서킷 브레이커를 반개방 상태로 전환할지 결정한다.
        # false는 대기 시간이 끝난 후 첫 번째 호출을 기다렸다가 반개방 상태로 전환한다.
        automatic-transition-from-open-to-half-open-enabled: true
        # 오류로 간주하지 않을 예외를 지정한다.
        ignore-exceptions:
          - se.magnus.api.exceptions.InvalidInputException
          - se.magnus.api.exceptions.NotFoundException
  retry:
    instances:
      product:
        # 첫 번째 호출을 포함한 총 시도 횟수
        max-attempts: 3
        # 재시도를 다시 수행하기 전의 대기 시간
        wait-duration: 1000
        # 재시도를 트리거하는 예외목록
        retry-exceptions:
          - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError

management:
  health:
    circuitbreakers:
      enabled: true

spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://dev-dey0yfw2zf2xbs77.us.auth0.com/

---
spring.config.activate.on-profile: docker

server.port: 8080
---
spring.config.activate.on-profile: streaming_partitioned

spring.cloud.stream.bindings.products-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.recommendations-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.reviews-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2
